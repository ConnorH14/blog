(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{485:function(t,e,s){"use strict";s.r(e);var a=s(2),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"intro-to-javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intro-to-javascript"}},[t._v("#")]),t._v(" Intro to JavaScript")]),t._v(" "),s("p",[s("strong",[t._v("1.")]),t._v(" Which keywords are used to declare a variable in JavaScript?")]),t._v(" "),s("p",[t._v("var, let, and const.")]),t._v(" "),s("p",[s("strong",[t._v("2.")]),t._v(" What is the definition of a function?")]),t._v(" "),s("p",[t._v("A function is a block of code that can be called to run somewhere else in the code.")]),t._v(" "),s("p",[s("strong",[t._v("3.")]),t._v(" What are the "),s("code",[t._v("SOLID")]),t._v(" principles?")]),t._v(" "),s("p",[t._v("Single Responsibility, Open closed principle, Liskov substitution principle, Interface segregation principle, Dependency Inversion Principle\nSOLID principles refer to object oriented programming and give a structure for design patterns in object oriented software development.")]),t._v(" "),s("p",[s("strong",[t._v("4.")]),t._v(" Given this array:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fruit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'banana'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pineapple'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'orange'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'strawberry'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("What index is the pineapple's current position? How do you know?")]),t._v(" "),s("p",[t._v("The index of the pineapple is fruit[2] it is 3 positions from the start and counting starts at 0.")]),t._v(" "),s("p",[s("strong",[t._v("5.")]),t._v(" With these two objects:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" you "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" friends"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" them "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Them"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" friends"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("how would you .push the "),s("code",[t._v("them")]),t._v(" object into the "),s("code",[t._v("you")]),t._v(" object's array of friends?")]),t._v(" "),s("p",[t._v("you.friends.push(them)")]),t._v(" "),s("p",[s("strong",[t._v("6.")]),t._v(" Give an example of a JavaScript "),s("code",[t._v("Conditional")]),t._v(":\nA JavaScript conditional would be something like == or >=, its a statement that checks if something is true, like if x is greater than or equal to y.")]),t._v(" "),s("p",[s("strong",[t._v("7.")]),t._v(" In the "),s("code",[t._v("for loop")]),t._v(' below, what is the name of the piece belongs inside the empty "______" space? What would you put here to increase '),s("code",[t._v("i")]),t._v(" by one on every iteration?")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" _______ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("The last space in the for loop is the update action, and it occurs at the end of every iteration.\nI would use i++ to increase i every iteration.")]),t._v(" "),s("p",[s("strong",[t._v("8.")]),t._v(" What does the "),s("code",[t._v("DOM")]),t._v(" acronym stand for? Which file is first accessed to render the "),s("code",[t._v("DOM")]),t._v("?")]),t._v(" "),s("p",[t._v("DOM stands for Document Object Model, and the first file accessed to render the DOM is the html file.")]),t._v(" "),s("p",[s("strong",[t._v("9.")]),t._v(" What are the "),s("code",[t._v("9")]),t._v(" ECMAScript types as defined by MDN?")]),t._v(" "),s("p",[t._v("undefined, Boolean, number, String, BigInt, Symbol, Object, Function, null")]),t._v(" "),s("p",[s("strong",[t._v("10.")]),t._v(" When it comes to functions or methods, what is the difference between a "),s("code",[t._v("parameter")]),t._v(" and an "),s("code",[t._v("argument")]),t._v("?")]),t._v(" "),s("p",[t._v("Arguments are passed into parameters in a function. The paramater allows different arguments to be passed into it, but all are defined as the parameter in the function.")]),t._v(" "),s("p",[s("strong",[t._v("11.")]),t._v(" What is the difference between a "),s("code",[t._v("primitive")]),t._v(" value and a "),s("code",[t._v("reference")]),t._v(" value?")]),t._v(" "),s("p",[t._v("A primitive value can be undefined, null, boolean, number, string or a symbol. A reference type is an object or an array.")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://connorh14.github.io/auto-clicker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Checkpoint Two"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);